@include critical {
    .grid {
        $self: &;
        max-width: 96vw;    
        @include desktop-only {
            padding-right: ceil(($gutter-width / 2));
            padding-left: floor(($gutter-width / 2));
            width: breakpoint(desktop);
        }

        @include mobile-only {
            padding-right: ceil(($mobile-gutter-width / 2));
            padding-left: floor(($mobile-gutter-width / 2));
            width: 100%;
        }

        .row {
            @extend %flex;
            @extend %flex--row;
            @extend %flex--wrap;
            @extend %flex--justify-flex-start;
            @extend %flex--align-flex-start;
    
            width: 100%;
            @include desktop-only {
                margin-right: floor(($gutter-width / -2));
                margin-left: ceil(($gutter-width / -2));    
            }
            @include mobile-only {
                margin-right: floor(($mobile-gutter-width / -2));
                margin-left: ceil(($mobile-gutter-width / -2));    
            }
        }
        @include desktop-only {
        
            .col {
                padding-right: ($gutter-width / 2);
                padding-left: ($gutter-width / 2);
                width: $col-width;
                flex-basis: $col-width;
    
                @for $c from $grid-columns through 1 {
                    $curr-col-width: $c * $col-width;
                    $curr-col-ratio: $col-width / $curr-col-width;
    
                    &--push-#{$c} {
                        margin-left: $c * $col-width;
                    }
    
                    &--#{$c} {
                        flex-basis: $curr-col-width;
                        width: $curr-col-width;
    
                        @for $n from $c through 1 {
                            $sub-col-width: percentage($curr-col-ratio * $n);
                            .col--#{$n} {
                                flex-basis: $sub-col-width;
                                width: $sub-col-width;
                            }
                        }  
                    }
    
                }
            }
        }
        @include mobile-only {
            .col-m {
                padding-right: ($mobile-gutter-width / 2);
                padding-left: ($mobile-gutter-width / 2);
                width: $mobile-col-width;
                flex-basis: $mobile-col-width;
    
                @for $c from $mobile-grid-columns through 1 {
                    $curr-col-width: $c * $mobile-col-width;
                    @if $c % 2 != 0 {
                        $curr-col-width: $mobile-col-width * ($c + 1);
                    }
                    $curr-col-ratio: $mobile-col-width / $curr-col-width;
    
                    &--push-#{$c} {
                        margin-left: $curr-col-width;
                    }
    
                    &--#{$c} {
                        flex-basis: $curr-col-width;
                        width: $curr-col-width;
    
                        @for $n from $c through 1 {
                            $sub-col-width: percentage($curr-col-ratio * $n);
                            .col-m--#{$n} {
                                flex-basis: $sub-col-width;
                                width: $sub-col-width;
                            }
                        }  
                    }
    
                }
            }
        }
    }
}